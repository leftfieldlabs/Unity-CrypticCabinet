%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4510294d23d964fe59443526f1ca7c4b, type: 3}
  m_Name: Feature Overview_Room Setup
  m_EditorClassIdentifier: 
  _displayName: Room Setup
  _prefix: 
  _context: {fileID: 11400000, guid: 08adf0039b761b5459a65c22ffc46b45, type: 2}
  _markdownFile: {fileID: 0}
  _priority: 2000
  overrideMarkdownText: "# Room Setup\r\nThis section describes the system used to
    automatically populate a generic real world room with game objects.\r\nThe <a
    href=\"https://developer.oculus.com/documentation/unity/unity-scene-overview/\">Scene
    API</a> is used to understand the space the user is in. Using the returned scene
    primitives, a 3d grid of cells is generated to cover the entire room and track
    where scene objects are placed.\r\nThis is to allow the room setup system to
    detect safe locations where to place game objects and to minimize overlapping
    with real world objects. This requires the user to set up their scene accurately
    to ensure the best possible experience.\r\nFree space in the 3d grid is visualized
    as green cells, while non-valid locations are shown in red. For example, in the
    following image you can see that the wall has some available space (green), but
    we are excluding the window (in red).Same for the floor which has red areas underneath
    desks and shelving.\r\n\r\nNote: To visualize the 3d grid in build, toggle the
    debug view by pressing down and holding on the left joystick, then press A on
    the right controller.\r\n\r\n![alt text](../Documentation/Images/RoomSetup.png){style=\"width:40%;height:40%\"}\r\n\r\nThere
    are four categories of placement location; \u201Cfloor\u201D, \u201Cwall\u201D,
    \u201Cdesks\u201D and \u201Cagainst wall\u201D. \u201CAgainst wall\u201D objects
    are the ones that need to be on the floor but also against a wall: a good example
    of this is the cabinet.\r\nAs an object is placed it blocks out the cells that
    it covers to prevent other objects from being placed in the same location.\r\nObjects
    are placed in the following order:\r\n1. Objects on floor against a wall \r\n2.
    Objects on walls \r\n3. Objects on desks (if no desks available, fallback to
    floor)\r\n4. Objects on floor \r\n5. Objects on any horizontal location.\r\n\r\nWithin
    each category objects are placed in order of size: largest to smallest.\r\nIf
    an object fails to find a safe location, it is placed in a  random valid location.
    For example, wall objects will stay on walls and floor objects will stay on floor,
    even if they are overlapping with other objects or scene objects.\r\n\r\nAfter
    all objects have been automatically placed, there\u2019s a few seconds of \u201Ceasing\u201D:
    this allows for any objects that are overlapping to repel away from each other.The
    easing is done using the Unity physics engine function <a href=\"https://docs.unity3d.com/ScriptReference/Physics.ComputePenetration.html\">ComputePenetration</a>,
    this gives a direction and distance to move objects to cause them to no longer
    overlap. Rather than jumping the objects to these new locations, this system
    lerps towards the location allowing opportunities for multiple objects to move
    away from each other over time.\r\n\r\n\r\nOnce the placement is complete, the
    user then has an opportunity to preview the generated layout. Objects in this
    phase are visualized as colored boxes:\r\n - Blue boxes: items that need to be
    physically reached during the experience because the user will interact with
    them using hands/controllers.\r\n - Green boxes: items that need to be visible,
    but don\u2019t need to be reached.\r\n - Red boxes: items that are in a non valid
    location, are overlapping with each other or are overlapping with scene objects.\r\nIn
    this phase, the user has an opportunity to manually move these boxes around,
    if necessary, to make sure there\u2019s no red boxes and that all blue boxes
    can be physically reached.\r\n\r\n![alt text](../Documentation/Images/SpawningBoxes.png){style=\"width:50%;height:50%\"}\r\n\r\nAfter
    this, the user can confirm the layout and start the experience.  Object positions
    are then stored and used during gameplay to avoid re-doing these heavy calculations.\r\n\r\n\r\n###
    Relevant Files\r\n- <a href=\"./Assets/CrypticCabinet/Scripts/Utils/ObjectPlacementManager.cs\">ObjectPlacementManager.cs</a>\r\n-
    <a href=\"./Assets/CrypticCabinet/Scripts/SceneManagement/SceneUnderstandingLocationPlacer.cs\">SceneUnderstandingLocationPlacer.cs</a>\r\n-
    <a href=\"./Assets/CrypticCabinet/Scripts/SceneManagement/FloorSpaceFinder.cs\">FloorSpaceFinder.cs</a>\r\n-
    <a href=\"./Assets/CrypticCabinet/Scripts/SceneManagement/WallSpaceFinder.cs\">WallSpaceFinder.cs</a>\r\n-
    <a href=\"./Assets/CrypticCabinet/Scripts/SceneManagement/DeskSpaceFinder.cs\">DeskSpaceFinder.cs</a>\r\n\r\n"
  overrideMarkdownRoot: .\Documentation/
